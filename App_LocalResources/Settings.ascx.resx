<?xml version="1.0" encoding="utf-8"?>
<root>
	<!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
	<xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
		<xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
		<xsd:element name="root" msdata:IsDataSet="true">
			<xsd:complexType>
				<xsd:choice maxOccurs="unbounded">
					<xsd:element name="metadata">
						<xsd:complexType>
							<xsd:sequence>
								<xsd:element name="value" type="xsd:string" minOccurs="0" />
							</xsd:sequence>
							<xsd:attribute name="name" use="required" type="xsd:string" />
							<xsd:attribute name="type" type="xsd:string" />
							<xsd:attribute name="mimetype" type="xsd:string" />
							<xsd:attribute ref="xml:space" />
						</xsd:complexType>
					</xsd:element>
					<xsd:element name="assembly">
						<xsd:complexType>
							<xsd:attribute name="alias" type="xsd:string" />
							<xsd:attribute name="name" type="xsd:string" />
						</xsd:complexType>
					</xsd:element>
					<xsd:element name="data">
						<xsd:complexType>
							<xsd:sequence>
								<xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
								<xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
							</xsd:sequence>
							<xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
							<xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
							<xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
							<xsd:attribute ref="xml:space" />
						</xsd:complexType>
					</xsd:element>
					<xsd:element name="resheader">
						<xsd:complexType>
							<xsd:sequence>
								<xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
							</xsd:sequence>
							<xsd:attribute name="name" type="xsd:string" use="required" />
						</xsd:complexType>
					</xsd:element>
				</xsd:choice>
			</xsd:complexType>
		</xsd:element>
	</xsd:schema>
	<resheader name="resmimetype">
		<value>text/microsoft-resx</value>
	</resheader>
	<resheader name="version">
		<value>2.0</value>
	</resheader>
	<resheader name="reader">
		<value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
	</resheader>
	<resheader name="writer">
		<value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
	</resheader>
	<data name="Configure.Message" xml:space="preserve">
    <value>Please configure module first!</value>
  </data>
	<data name="ControlTitle_settings.Text" xml:space="preserve">
    <value>BBQuery Module Settings</value>
  </data>
	<data name="lblAllowDeletes.Help" xml:space="preserve">
    <value>Check if you want to allow special users to delete data</value>
  </data>
	<data name="lblAllowDeletes.Text" xml:space="preserve">
    <value>Allow Deletes</value>
  </data>
	<data name="lblAllowEdits.Help" xml:space="preserve">
    <value>Check if you want to allow special users to edit data</value>
  </data>
	<data name="lblAllowEdits.Text" xml:space="preserve">
    <value>Allow Edits</value>
  </data>
	<data name="lblConnectionString.Help" xml:space="preserve">
    <value>Please enter the connection string  for connection to your data source</value>
  </data>
	<data name="lblConnectionString.Text" xml:space="preserve">
    <value>Connection String</value>
  </data>
	<data name="lblDelete.Help" xml:space="preserve">
    <value>Enter the DELETE SQL statement which should delete the data. Use parameter syntax (e.g. DELETE FROM Table WHERE idfield=@idfield)</value>
  </data>
	<data name="lblDelete.Text" xml:space="preserve">
    <value>Delete Command</value>
  </data>
	<data name="lblIntro.Text" xml:space="preserve">
    <value>Define SQL Commands, Parameters and so on....</value>
  </data>
	<data name="lblKey.Help" xml:space="preserve">
    <value>Please enter the primary key of your selection </value>
  </data>
	<data name="lblKey.Text" xml:space="preserve">
    <value>Primary Key</value>
  </data>
	<data name="lblProvider.Help" xml:space="preserve">
    <value>Please select the database provider for connection to your data source</value>
  </data>
	<data name="lblProvider.Text" xml:space="preserve">
    <value>Database Provider</value>
  </data>
	<data name="lblRoleAllowDeletes.Help" xml:space="preserve">
    <value>Select the role a user needs to have delete rights (if 'allow delete' is true)</value>
  </data>
	<data name="lblRoleAllowDeletes.Text" xml:space="preserve">
    <value>Delete Role</value>
  </data>
	<data name="lblRoleAllowEdits.Help" xml:space="preserve">
    <value>Select the role a user needs to have edit rights (if 'allow edits' is true)</value>
  </data>
	<data name="lblRoleAllowEdits.Text" xml:space="preserve">
    <value>Edit Role</value>
  </data>
	<data name="lblSqlCommand.Help" xml:space="preserve">
    <value>Enter the SELECT SQL command which selects the data to be shown in result view</value>
  </data>
	<data name="lblSqlCommand.Text" xml:space="preserve">
    <value>Select Command:</value>
  </data>
	<data name="lblUpdate.Help" xml:space="preserve">
    <value>Enter the UPDATE SQL statement which should update the data. Use parameter syntax (e.g. UPDATE Table SET field1=@field1, field2=@field2 WHERE idfield=@idfield)</value>
  </data>
	<data name="lblUpdate.Text" xml:space="preserve">
    <value>Update Command</value>
  </data>
	<data name="Select.Text" xml:space="preserve">
    <value>Select Settings</value>
  </data>
	<data name="valConnectionString.Error" xml:space="preserve">
    <value>Connection String is manatory!</value>
  </data>
	<data name="valKey.Error" xml:space="preserve">
    <value>Promary key is mandatory</value>
  </data>
	<data name="valSqlCommand.Error" xml:space="preserve">
    <value>Select command is mandatory!</value>
  </data>
	<data name="valUpdate.Error" xml:space="preserve">
    <value>Update command is mandatory!</value>
  </data>
	<data name="Edit.Text" xml:space="preserve">
    <value>Edit Settings</value>
  </data>
	<data name="Parameters.Text" xml:space="preserve">
    <value>Parameters</value>
  </data>
	<data name="lblSql.Help" xml:space="preserve">
    <value>Shows the SQL statement which leads to the shown data</value>
  </data>
	<data name="lblSql.Text" xml:space="preserve">
    <value>Show SQL</value>
  </data>
	<data name="lblAllowInserts.Help" xml:space="preserve">
    <value>Check if you want to allow special users to insert data</value>
  </data>
	<data name="lblAllowInserts.Text" xml:space="preserve">
    <value>Allow Inserts</value>
  </data>
	<data name="lblInsert.Help" xml:space="preserve">
    <value>Enter the INSERT SQL statement which should insert the data. Use parameter syntax (e.g. INSERT INTO Table (field1,field2,field3) VALUES (@field1,@field2,@field3) )</value>
  </data>
	<data name="lblInsert.Text" xml:space="preserve">
    <value>Insert Command</value>
  </data>
	<data name="lblRoleAllowInserts.Help" xml:space="preserve">
    <value>Select the role a user needs to have inserts rights (if 'allow inserts' is true)</value>
  </data>
	<data name="lblRoleAllowInserts.Text" xml:space="preserve">
    <value>Insert Role</value>
  </data>
	<data name="valInsert.Error" xml:space="preserve">
    <value>Insert command is mandatory!</value>
  </data>
	<data name="lblHideModule.Help" xml:space="preserve">
    <value>if checked module is only shown if one of the defined search parameters is filled.</value>
  </data>
	<data name="lblHideModule.Text" xml:space="preserve">
    <value>Hide module</value>
  </data>
	<data name="lblLinkSource.Help" xml:space="preserve">
    <value>Enter a comma seperated list of fields which should be shown as links</value>
  </data>
	<data name="lblLinkSource.Text" xml:space="preserve">
    <value>Field-Links</value>
  </data>
	<data name="Link.Text" xml:space="preserve">
    <value>Link Settings</value>
  </data>
</root>